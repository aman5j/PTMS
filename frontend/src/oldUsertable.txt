import React, { useState, useEffect } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TablePagination,
} from "@mui/material";

import { makeStyles } from "@mui/styles";
import { getData } from "../services/FetchNodeServices";
import EditIcon from '@mui/icons-material/Edit';

// Sample users data
const usersData = [
  { id: 1, name: "John Doe", email: "john.doe@email.com" },
  { id: 2, name: "Jane Smith", email: "jane.smith@email.com" },
  { id: 3, name: "Alex Lee", email: "alex.lee@email.com" },
  { id: 1, name: "John Doe", email: "john.doe@email.com" },
  { id: 2, name: "Jane Smith", email: "jane.smith@email.com" },
  { id: 3, name: "Alex Lee", email: "alex.lee@email.com" },
  { id: 1, name: "John Doe", email: "john.doe@email.com" },
  { id: 2, name: "Jane Smith", email: "jane.smith@email.com" },
  { id: 3, name: "Alex Lee", email: "alex.lee@email.com" },
  { id: 1, name: "John Doe", email: "john.doe@email.com" },
  { id: 2, name: "Jane Smith", email: "jane.smith@email.com" },
  { id: 3, name: "Alex Lee", email: "alex.lee@email.com" },
  // ...add more users as needed
];

// Custom styles using @mui/styles
const useStyles = makeStyles({
  table: {
    minWidth: 650,
  },
  header: {
    backgroundColor: "#e0e0e0",
  },
});

export default function UsersTable() {
  const classes = useStyles();
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [users, setUsers] = useState([]);

  // Get Users Data
  const fetchAllUsers = async () => {
    var result = await getData("login/fetch_all_users");
    setUsers(result.data)
  };

  useEffect(function () {
    fetchAllUsers();
  }, []);

  // Pagination handlers
  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 5));
    setPage(0);
  };

  // Paginated users
  const paginatedUsers = users.slice(  //usersData
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage
  );



  return (
    <Paper style={{ width: "80vw", margin: "2rem auto" }}>
      <TableContainer>
        <Table className={classes.table} aria-label="users table">
          <TableHead>
            <TableRow className={classes.header}>
              {/* <TableCell>Edit</TableCell> */}
              <TableCell>ID</TableCell>
              <TableCell>Name</TableCell>
              <TableCell>Email</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {paginatedUsers.map((user) => (
              <TableRow key={user._id}>
                {/* <TableCell><EditIcon style={{cursor: 'pointer'}} /></TableCell> */}
                <TableCell>{user._id}</TableCell>
                <TableCell>{user.name}</TableCell>
                <TableCell>{user.email}</TableCell>
              </TableRow>
            ))}
            {paginatedUsers.length === 0 && (
              <TableRow>
                <TableCell colSpan={3} align="center">
                  No users found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        component="div"
        count={usersData.length}
        page={page}
        onPageChange={handleChangePage}
        rowsPerPage={rowsPerPage}
        rowsPerPageOptions={[5, 10, 20]}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Paper>

  );
}
