import React from "react";
import { Grid, Box, Button, IconButton, Snackbar, Typography  } from "@mui/material";
import { makeStyles } from "@mui/styles";
import OwnerDetails from "./OwnerDetails";
import PropertyDetailsForm from "./PropertyDetailsForm";
import FloorWiseDetails from "./FloorWiseDetails";
import BuildingImages from "./BuildingImages";
import PropertyTable from "./PropertyTable";
import { postData, getData } from "../services/FetchNodeServices";
import CloseIcon from "@mui/icons-material/Close";
import { useEffect } from "react";

const useStyles = makeStyles({
  ownerheading: {
    width: "100%",
    height: "100%",
    display: "flex",
    justifyContent: "center",
    background: "#f5f5f5",
  },
  root: {
    width: "100%",
    height: "100%",
    display: "flex",
    justifyContent: "center",
  },
  box: {
    width: 990,
    height: "auto",
    background: "#f1f2f6",
    padding: 10,
    margin: 10,
    borderRadius: 10,
  },
  center: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  },
});

export default function PropertyDetails() {
  const classes = useStyles();
  // Property Details Form Field
  const [zone, setZone] = React.useState("");
  const [ward, setWard] = React.useState("");
  const [mohalla, setMohalla] = React.useState("");
  const [buildingId, setBuildingId] = React.useState("");
  const [oldPid, setOldPid] = React.useState("");
  const [latitude, setLatitude] = React.useState("");
  const [longitude, setLongitude] = React.useState("");
  const [roadType, setRoadType] = React.useState("");
  const [roadWidth, setRoadWidth] = React.useState("");
  const [ownershipStatus, setOwnershipStatus] = React.useState("");
  const [constructionYear, setConstructionYear] = React.useState("");
  const [plotArea, setPlotArea] = React.useState("");
  const [constructionType, setConstructionType] = React.useState("");
  const [houseUsage, setHouseUsage] = React.useState("");
  const [sewerConnection, setSewerConnection] = React.useState(false);
  const [isDisabled, setIsDisabled] = React.useState(false);

  // Owner Details Field
  const [ownerName, setOwnerName] = React.useState("");
  const [mobileNo, setMobileno] = React.useState("");
  const [email, setEmail] = React.useState("");
  const [fatherName, setFatherName] = React.useState("");
  const [husbandName, setHusbandName] = React.useState("");
  const [houseno, setHouseno] = React.useState("");
  const [propertyAddress, setPropertyAddress] = React.useState("");

  // Building Images Field
  const [frontView, setFrontView] = React.useState({ url: "", bytes: "" });
  const [rightView, setRightView] = React.useState({ url: "", bytes: "" });
  const [leftView, setLeftView] = React.useState({ url: "", bytes: "" });

  const [buildingImages, setBuildingImages] = React.useState([]);
  // Get Users Data
  const fetchBuildingImages = async () => {
    var result = await getData("buildingimages/fetch_buildingimages");
    console.log("In Property Table Data : ", result.data);

    setBuildingImages(result.data);
    // console.log("in detail variable have data: ", detail);
  };

  useEffect(function () {
    fetchBuildingImages();
  }, []);

  // Toast Veriables Field
  const [msg, setMsg] = React.useState("");
  const [toastOpen, setToastOpen] = React.useState(false);

  const handleClose = (event, reason) => {
    if (reason === "clickaway") return;
    setToastOpen(false);
  };

  const action = (
    <React.Fragment>
      <Button color="secondary" size="small" onClick={handleClose}>
        UNDO
      </Button>
      <IconButton
        size="small"
        aria-label="close"
        color="inherit"
        onClick={handleClose}
      >
        <CloseIcon fontSize="small" />
      </IconButton>
    </React.Fragment>
  );

  const handleSubmit = async (event) => {
    event.preventDefault();
    console.log(
      `data of page is : 
        ownerName = ${ownerName}, mobileNo = ${mobileNo}, Email = ${email}, fatherName = ${fatherName},
        husbandName = ${husbandName}, propertyAddress = ${propertyAddress}, zone = ${zone},
        ward = ${ward}, mohalla = ${mohalla} buildingId = ${buildingId},
        oldPid = ${oldPid}, latitude = ${latitude}, longitude = ${longitude}, roadType = ${roadType},
        roadWidth = ${roadWidth}, ownershipStatus = ${ownershipStatus}, constructionYear = ${constructionYear},
        plotArea = ${plotArea}, constructionType = ${constructionType}, houseUsage = ${houseUsage},
        sewerConnection = ${sewerConnection}, isDisabled = ${isDisabled}, frontView = ${frontView}, 
        rightView = ${rightView}, leftView = ${leftView}
        `,
      ownerName,
      mobileNo,
      email,
      fatherName,
      husbandName,
      houseno,
      propertyAddress,
      zone,
      ward,
      mohalla,
      buildingId,
      oldPid,
      latitude,
      longitude,
      roadType,
      roadWidth,
      ownershipStatus,
      constructionYear,
      plotArea,
      constructionType,
      houseUsage,
      sewerConnection,
      isDisabled,
      frontView,
      rightView,
      leftView
    );
    var formData = new FormData();
    formData.append("ownerName", ownerName);
    formData.append("mobileNo", mobileNo);
    formData.append("email", email);
    formData.append("fatherName", fatherName);
    formData.append("husbandName", husbandName);
    formData.append("houseno", houseno);
    formData.append("propertyAddress", propertyAddress);
    formData.append("zone", zone);
    formData.append("ward", ward);
    formData.append("mohalla", mohalla);
    formData.append("buildingId", buildingId);
    formData.append("oldPid", oldPid);
    formData.append("latitude", latitude);
    formData.append("longitude", longitude);
    formData.append("roadType", roadType);
    formData.append("roadWidth", roadWidth);
    formData.append("ownershipStatus", ownershipStatus);
    formData.append("constructionYear", constructionYear);
    formData.append("houseUsage", houseUsage);
    formData.append("sewerConnection", sewerConnection);
    formData.append("isDisabled", isDisabled);
    formData.append("frontView", frontView.bytes);
    formData.append("rightView", rightView.bytes);
    formData.append("leftView", leftView.bytes);
    try {
      var result = await postData(
        "propertydetails/propertydetails_submit",
        formData
      );
      console.log("propertydetails submit:", result);
      setMsg(result.message);
      setToastOpen(true);
      //   if (result.status) {
      //     setTimeout(() => {
      //       navigate("/");
      //     }, 1500);
      //   }
    } catch (e) {
      setMsg(result.message);
      setToastOpen(true);
      console.log("property details error: ", e);
    }
  };

  const zoneWardMapping = {
    zone1: ["ward1", "ward2", "ward3"],
    zone2: ["ward4", "ward5", "ward6"],
    zone3: ["ward7", "ward8", "ward9"],
  };

  const wardMohallaMapping = {
    ward1: ["mohalla1", "mohalla2", "mohalla3"],
    ward2: ["mohalla14", "mohalla5", "mohalla6"],
    ward3: ["mohalla7", "mohalla8", "mohalla9"],
    ward4: ["mohalla10", "mohalla11", "mohalla12"],
    ward5: ["mohalla13", "mohalla14", "mohalla15"],
    ward6: ["mohalla16", "mohalla17", "mohalla18"],
    ward7: ["mohalla19", "mohalla20", "mohalla21"],
    ward8: ["mohalla22", "mohalla23", "mohalla24"],
    ward9: ["mohalla25", "mohalla26", "mohalla27"],
  };

  // Handlers
  const handleZone = (e) => {
    setZone(e.target.value);
    setWard("");
    setMohalla("");
  };

  const handleWard = (e) => {
    setWard(e.target.value);
    setMohalla("");
  };

  const handleMohalla = (e) => {
    setMohalla(e.target.value);
  };

  const wardOptions = zone ? zoneWardMapping[zone] : [];
  const mohallaOptions = ward ? wardMohallaMapping[ward] : [];

  return (
    // <div className={classes.root} >
    //  <div className={classes.box}>
    <div>
      <Box sx={{ flexGrow: 1, maxWidth: 900 }}>
        <Typography variant="h5" gutterBottom align="left">
                Add Property
        </Typography>
        <form onSubmit={handleSubmit} noValidate>
          <Grid container spacing={4} alignItems="center">
            {/* Reusable Owner Form */}
            <OwnerDetails
              ownerName={ownerName}
              setOwnerName={setOwnerName}
              mobileNo={mobileNo}
              setMobileno={setMobileno}
              email={email}
              setEmail={setEmail}
              fatherName={fatherName}
              setFatherName={setFatherName}
              husbandName={husbandName}
              setHusbandName={setHusbandName}
              houseno={houseno}
              setHouseno={setHouseno}
              propertyAddress={propertyAddress}
              setPropertyAddress={setPropertyAddress}
            />

            {/* Reusable Property Form */}
            <PropertyDetailsForm
              zone={zone}
              ward={ward}
              mohalla={mohalla}
              handleZone={handleZone}
              handleWard={handleWard}
              handleMohalla={handleMohalla}
              wardOptions={wardOptions}
              mohallaOptions={mohallaOptions}
              buildingId={buildingId}
              setBuildingId={setBuildingId}
              oldPid={oldPid}
              setOldPid={setOldPid}
              latitude={latitude}
              setLatitude={setLatitude}
              longitude={longitude}
              setLongitude={setLongitude}
              roadType={roadType}
              setRoadType={setRoadType}
              roadWidth={roadWidth}
              setRoadWidth={setRoadWidth}
              ownershipStatus={ownershipStatus}
              setOwnershipStatus={setOwnershipStatus}
              constructionYear={constructionYear}
              setConstructionYear={setConstructionYear}
              plotArea={plotArea}
              setPlotArea={setPlotArea}
              constructionType={constructionType}
              setConstructionType={setConstructionType}
              houseUsage={houseUsage}
              setHouseUsage={setHouseUsage}
              sewerConnection={sewerConnection}
              setSewerConnection={setSewerConnection}
              isDisabled={isDisabled}
              setIsDisabled={setIsDisabled}
            />
          </Grid>

          {/* Reusable Floor Wise Details */}
          <FloorWiseDetails />

          {/* Reusable Property Table */}
          <PropertyTable />

          {/* Building Images */}
          <BuildingImages
            frontView={frontView}
            setFrontView={setFrontView}
            rightView={rightView}
            setRightView={setRightView}
            leftView={leftView}
            setLeftView={setLeftView}
          />

          <Grid size={12} item xs={12}>
            <Button
              fullWidth
              sx={{
                borderRadius: 3,
                mt: 2,
                py: 1.3,
                fontWeight: 600,
                fontSize: "1.1rem",
                background: "linear-gradient(90deg, #4e54c8 0%, #8f94fb 100%)",
                color: "#fff",
                boxShadow: "0 2px 8px rgba(78,84,200,0.10)",
                "&:hover": {
                  background:
                    "linear-gradient(90deg, #8f94fb 0%, #4e54c8 100%)",
                },
              }}
              type="submit"
              variant="contained"
            >
              Submit
            </Button>{" "}
            <Snackbar
              open={toastOpen}
              autoHideDuration={4000}
              onClose={handleClose}
              message={msg}
              action={action}
              anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
            />
          </Grid>
        </form>
      </Box>
    </div>
    // </div>
  );
}
